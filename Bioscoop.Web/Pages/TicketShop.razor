@page "/TicketShop/{Id:int}"
@inherits TicketShopBase

@if (Show == null && ErrorMessage == null)
{
    <DisplaySpinner />
}
else if (ErrorMessage != null)
{
    <h3 class="text-danger">@ErrorMessage</h3>
}
else
{
    var rows = Show.RoomRows;
    var seats = Show.RoomSeats;
    var seatsPerRow = seats / rows;

    <div class="ticket-shop">
        <div class="seat-container">
            <ul class="showcase">
                <li>
                    <div class="seat"></div>
                    <small>Beschikbaar</small>
                </li>
                <li>
                    <div class="seat selected"></div>
                    <small>Geselecteerd</small>
                </li>
                <li>
                    <div class="seat occupied"></div>
                    <small>Bezet</small>
                </li>
            </ul>

            <div class="container">
                <div class="screen"></div>

                <ul class="icons">
                    <img src="Icons/box-arrow-left.svg" class="inoutIcon" />
                    <img src="Icons/box-arrow-right.svg" class="inoutIcon"/>
                </ul>

                
                @*<img src="Icons/wheelchair-solid.svg"/>*@

                @for (int r = 1; r <= rows; r++)
                {
                    @for (int s = 1; s <= seatsPerRow; s++)
                    {
                        bool trueInList = Tickets.Any(t => t.RowNumber == r && t.SeatNumber == s);
                        bool selectedInList = SelectedSeats.Any(t => t.rownr == r && t.seatnr == s);
                        if (trueInList)
                        {
                            Seat seat = new Seat(s, r, "occupied");
                            Seats.Add(seat);
                        }
                        else if (selectedInList)
                        {
                            Seat seat = new Seat(s, r, "selected");
                            Seats.Add(seat);
                        }
                        else
                        {
                            Seat seat = new Seat(s, r, "available");
                            Seats.Add(seat);
                        }
                    }
                }

                @for (int r = 1; r <= rows; r++)
                {
                    bool trueInRow = Seats.Any(s => s.rownr == r);
                    if (trueInRow)
                    {
                        <div class="row">
                            @r
                            @foreach (Seat seat in Seats)
                            {
                                if(seat.rownr == r)
                                {
                                    if (seat.type == "occupied")
                                    {
                                        <div class="seat occupied">@seat.seatnr</div>
                                    }
                                    else if (seat.type == "selected")
                                    {
                                        <div class="seat selected" @onclick="() => DeselectChair(seat.seatnr, seat.rownr)">@seat.seatnr</div>
                                    }
                                    else
                                    {
                                        <div class="seat" @onclick="() => AssignChairRow(seat.seatnr, seat.rownr)">@seat.seatnr</div>
                                    }
                                }
                            }
                        </div>
                    }
                }
            </div>
        </div>

        <div class="info-container">
            <img class="img-thumbnail" src="@Show.MovieImageURL">
            <p>@Show.MovieTitle</p>
            @if(Show.RoomWheelchairFriendly)
            {
                <p>Roelstoel toegankelijk</p>
            }

            <form class="ticket-form">
                <div class="filter-item">
                    <select name="ticketTypeFilter" class="form-select filter-item" @onchange="@OnTicketSelect">
                        <option value="" disabled selected>Kaartje</option>
                        <option value="Normaal">Normaal € 8,50</option>
                        <option value="Kind">Kind tot en met 11 jaar € 7,00</option>
                        <option value="Student">Studenten € 7,00</option>
                        <option value="65+">65+ € 7,00</option>
                    </select>
                </div>
                <div class="filter-item">
                    <select name="popcornFilter" class="form-select filter-item" @onchange="@OnPopcornSelect">
                        <option value="" disabled selected>Popcorn-arrangement</option>
                        <option value="Ja">Ja € 3,00</option>
                        <option value="Nee">Nee</option>
                    </select>
                </div>
                <button type="button" class="button"
                    @onclick="() => (AddTicket_ForShow(new TicketToAddDto{
                        ShowId = Show.Id,
                        RowNumber = row,
                        SeatNumber = chair,
                        Price = FinalPrice()
                    }))">
                    Bestellen
                </button>
            </form>
        </div>
    </div>
}

@code {
    private bool shouldRender = true;

    int chair { get; set; }
    int row { get; set; }
    decimal ticketPrice { get; set; }
    decimal popcornPrice { get; set; }

    void AssignChairRow(int chairNr, int rowNr)
    {
        chair = chairNr;
        row = rowNr;

        Seat seat = new Seat(chairNr, rowNr, "selected");
        SelectedSeats.Add(seat);

        Seats.Clear();
        shouldRender = true;
    }

    void DeselectChair(int chairNr, int rowNr)
    {
        var itemToRemove = SelectedSeats.Single(s => s.seatnr == chairNr && s.rownr == rowNr);
        SelectedSeats.Remove(itemToRemove);

        Seats.Clear();
        shouldRender = true;
    }

    void OnTicketSelect(ChangeEventArgs e)
    {
        shouldRender = false;
        var ticketType = e.Value.ToString();

        if (ticketType == "Normaal")
        {
            ticketPrice = (decimal)8.50;
        }
        else if (ticketType == "Kind")
        {
            ticketPrice = (decimal)7.00;
        }
        else if (ticketType == "Student")
        {
            ticketPrice = (decimal)7.00;
        }
        else
        {
            ticketPrice = (decimal)7.00;
        }
    }

    void OnPopcornSelect(ChangeEventArgs e)
    {
        shouldRender = false;
        var popcornArrangement = e.Value.ToString();

        if (popcornArrangement == "Ja")
        {
            popcornPrice = (decimal)3.00;
        }
        else
        {
            popcornPrice = (decimal)0.00;
        }
    }

    decimal FinalPrice() => ticketPrice + popcornPrice;

    protected override bool ShouldRender()
    {
        return shouldRender;
    }
}