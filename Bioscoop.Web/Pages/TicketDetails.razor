@using Bioscoop.Models.Models;
@using Syncfusion.Pdf
@using Syncfusion.Pdf.Grid;
@using Syncfusion.Drawing;
@using Syncfusion.Pdf.Graphics;
@using System.Text.Json;
@using System.IO;
@using Bioscoop.Web.Pages

@inject Microsoft.JSInterop.IJSRuntime JS
@inject IJSRuntime JSRuntime;

@page "/TicketDetails"
@page "/TicketDetails/{Id:int?}"
@inherits TicketDetailsBase

@if (Id == 0){
    <h3>Ticket not found.</h3>
    @*Search box for ticket
    <hr />
    <h4>Search on ticket-ID:</h4>
    <input type="text" @bind-value="@ticketID" />
    <button @onclick="(() => openPage(ticketID))">Search</button>
    *@

}
else if (Id == -1)
{
    <h3>Ticket mailed.</h3>   
}
else if (Ticket == null && ErrorMessage == null)
{
    <h3>Loading ticket details</h3>
}
else if (ErrorMessage != null)
{
    <h3 class="text-danger">@ErrorMessage</h3>
}
else
{
    <h3>Succes, ticket found:</h3>

    <table class="table">
        <thead>
            <tr>
                <th>Time</th>
                <th>Movie</th>
                <th>Price</th>
                <td>Room</td>
                <th>Row</th>
                <th>Seat</th>
	            <th>Popcorn</th>
                
            </tr>
        </thead>
        <tbody>
                <tr>
                <td>@Ticket.ShowStartDateTime</td>
                <td>@Ticket.MovieTitle</td>
                <td>@Ticket.Price</td>
                <td>@Ticket.RoomName</td>
                <td>@Ticket.RowNumber</td>
                <td>@Ticket.SeatNumber</td>
	                <td>@Ticket.PopPrice</td>
                </tr>    
        </tbody>
    </table>
             <div class="row">
                 <div class="col-md-2">
                     <button class="btn btn-primary" @onclick="(() => ExportToPdf())">Print ticket</button>
                 </div>
             </div>
             <hr/>
             <EditForm Model="@Mailadres">
                <DataAnnotationsValidator />
                <ValidationSummary /> 
                <div class="col-md-3">
                 <div class="form-group">
                     <label for="Mailadres">Mailadres:</label>
                     <InputText @bind-Value=Mailadres.mailadres class="form-control" id="Mailadres"/>                 
                     <ValidationMessage For=@(() => Mailadres.mailadres) />
                 </div>        
                 </div>
                 <br/>
                <input type="submit" class="btn-primary" value="Mail ticket" @onclick="(() => ExportToPdf(true))" />
             </EditForm>




    @*Format ticket for generating pdf*@
    ticketDetails = Ticket.ShowStartDateTime + "\n"
                        + Ticket.MovieTitle + "\n"
                        + "Price: " + Ticket.Price + "\n"
						+ "Popcorn " + Ticket.PopPrice + "\n"
                        + Ticket.RoomName + "\n"
                        + "Row: " + Ticket.RowNumber + "\n"
                        + "Seat: " + Ticket.SeatNumber + "\n"
                        + "Code: " + Ticket.Code + "\n";
}

@*Search box for ticket*@
<hr/>
<h4>Search on ticket-ID:</h4>
<input type="text" @bind-value="@ticketID" />
<button @onclick="(() => openPage(ticketID))">Search</button>

@code {
    public string ticketDetails;
    public string ticketID;
    public string emailAdres;
    Mailadres Mailadres = new Mailadres();

    protected override void OnInitialized()
    {
        Id = Id ?? 0; 
    }

    public void openPage(string ticketID)
    {
        string url = "/TicketDetails/" + ticketID;
        JSRuntime.InvokeVoidAsync("open", url, "_self");
    }
}

@functions {
    void ExportToPdf(bool mail = false)
    {
        int paragraphAfterSpacing = 8;
        int cellMargin = 8;
        //Create a new PDF document.
        PdfDocument pdfDocument = new PdfDocument();
        //Add Page to the PDF document.
        PdfPage page = pdfDocument.Pages.Add();

        //Create a new font.
        PdfStandardFont font = new PdfStandardFont(PdfFontFamily.TimesRoman, 16);
        //Create a text element to draw a text in PDF page.
        PdfTextElement title = new PdfTextElement("Ticket", font, PdfBrushes.Black);
        PdfLayoutResult result = title.Draw(page, new PointF(0, 0));
        PdfStandardFont contentFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
        //Create text element.
        PdfTextElement content = new PdfTextElement(ticketDetails, contentFont, PdfBrushes.Black);
        PdfLayoutFormat format = new PdfLayoutFormat();
        format.Layout = PdfLayoutType.Paginate;
        //Draw a text to the PDF document.
        result = content.Draw(page, new RectangleF(0, result.Bounds.Bottom + paragraphAfterSpacing, page.GetClientSize().Width, page.GetClientSize().Height), format);

        //Create memory stream.
        MemoryStream memoryStream = new MemoryStream();
        //Save the PDF document.
        pdfDocument.Save(memoryStream);
        //Download the PDF document
        if (mail && Mailadres.mailadres != null)
        {
            MailService.EmailTicketByte(new MailDataWithAttachmentByte(
                new List<string> { Mailadres.mailadres },
                "Ticket for " + Ticket.MovieTitle + " | Time: " + Ticket.ShowStartDateTime,
                memoryStream.ToArray(),
                "Dear costumer, <br/><br/> Enjoy the Movie!<br/><br/> Greetings, Bioscoop"
                ));
            openPage("-1");
        }
        else if (mail == false)
        {
            JS.SaveAs("Ticket.pdf", memoryStream.ToArray());
        }

    }
}
