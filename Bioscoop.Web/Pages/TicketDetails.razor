@using Bioscoop.Models.Models;
@using Syncfusion.Pdf
@using Syncfusion.Pdf.Grid;
@using Syncfusion.Drawing;
@using Syncfusion.Pdf.Graphics;
@using System.Text.Json;
@using System.IO;
@using Microsoft.AspNetCore.WebUtilities;

@inject Microsoft.JSInterop.IJSRuntime JS
@inject IJSRuntime JSRuntime;
@inject IStringLocalizer<Language> _localizer
@inject NavigationManager NavManager;

@page "/TicketDetails"
@page "/TicketDetails/{Id:int?}"
@inherits TicketDetailsBase

@if (showMessage != null)
{
    <h3>@showMessage</h3>
}
else if (Ticket == null && ErrorMessage == null)
{
    <h3>@_localizer["Loading ticket details"]</h3>
}
else if (ErrorMessage != null)
{
    <h3 class="text-danger">@ErrorMessage</h3>
    <h3 class="text-danger">@*@ErrorMessagePayment*@</h3>
}
else
{
    <h3>@_localizer["Succes, ticket found:"]</h3>

    <table class="table">
        <thead>
            <tr>
                <th>@_localizer["Time"]</th>
                <th>@_localizer["Movie"]</th>
                <th>@_localizer["Price"]</th>
                <td>@_localizer["Room"]</td>
                <th>@_localizer["Row"]</th>
                <th>@_localizer["Seat"]</th>
            </tr>
        </thead>
        <tbody>
                <tr>
                <td>@Ticket.ShowStartDateTime</td>
                <td>@Ticket.MovieTitle</td>
                <td>@Ticket.Price</td>
                <td>@Ticket.RoomName</td>
                <td>@Ticket.RowNumber</td>
                <td>@Ticket.SeatNumber</td>
                </tr>    
        </tbody>
    </table>
    @if (Payment != null && Payment.Status == "paid")
    {
        <div class="row">
            <div class="col-md-2">
                <button class="btn btn-primary" @onclick="(() => ExportToPdf())">@_localizer["Print ticket"]</button>
            </div>
        </div>
        <hr/>
        <EditForm Model="@Mailadres">
                <DataAnnotationsValidator />
                <ValidationSummary /> 
                <div class="col-md-3">
                 <div class="form-group">
                     <label for="Mailadres">Mailadres:</label>
                     <InputText @bind-Value=Mailadres.mailadres class="form-control" id="Mailadres"/>                 
                     <ValidationMessage For=@(() => Mailadres.mailadres) />
                 </div>        
                 </div>
                 <br/>
                <input type="submit" class="btn-primary" value="Mail ticket" @onclick="(() => ExportToPdf(true))" />
        </EditForm>
    } else
    {
        <input type="submit" class="btn-primary" value=@_localizer["Pay Ticket"] @onclick="(() => PayTicket(Ticket.Price, Ticket))" />
    }

    

    @*Format ticket for generating pdf*@
    ticketDetails = Ticket.ShowStartDateTime + "\n"
                        + Ticket.MovieTitle + "\n"
                        + "Price: " + Ticket.Price + "\n"
                        + Ticket.RoomName + "\n"
                        + "Row: " + Ticket.RowNumber + "\n"
                        + "Seat: " + Ticket.SeatNumber + "\n"
                        + "Code: " + Ticket.Code + "\n";
}

@*Search box for ticket*@
<hr/>
<h4>@_localizer["Search on ticket code:"]</h4>
<input type="number" @bind-value="@ticketID" />
<button @onclick="(() => openPage(ticketID))">@_localizer["Search"]</button>

@code {
    public string ticketDetails;
    public string ticketID;
    public string emailAdres;
    Mailadres Mailadres = new Mailadres();

    protected override void OnInitialized()
    {
        if (Id == null)
        {
            showMessage = " ";
        }

        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("message", out var message))
        {
            showMessage = Convert.ToString(message);
        }
    }

    public async Task openPage(string ticketID)
    {
        TicketDto ticketdto = default(TicketDto);

        try 
        {

            ticketdto = await TicketService.GetTicketByCode(int.Parse(ticketID));

        } 
        catch (Exception ex)
        {

            JSRuntime.InvokeVoidAsync("open", "/TicketDetails?message=Ticket not found, please try again.", "_self");

        }

        string url = "/TicketDetails/" + ticketdto.Id;
        JSRuntime.InvokeVoidAsync("open", url, "_self");
    }

    public void showMessageOnPage(string message)
    {
        JSRuntime.InvokeVoidAsync("open", $"/TicketDetails?message={message}", "_self");
    }

    public string getPaymentLink(string paymentID)
    {
        return " ";
    }
}

@functions {
    async void PayTicket(decimal amount, TicketDto ticket)
    {
        Payment = await PaymentService.MakePayment(amount, ticket);
        JSRuntime.InvokeVoidAsync("open", Payment.PaymentLink, "_self");
    }

    void ExportToPdf(bool mail = false)
    {
        int paragraphAfterSpacing = 8;
        int cellMargin = 8;
        //Create a new PDF document.
        PdfDocument pdfDocument = new PdfDocument();
        //Add Page to the PDF document.
        PdfPage page = pdfDocument.Pages.Add();

        //Create a new font.
        PdfStandardFont font = new PdfStandardFont(PdfFontFamily.TimesRoman, 16);
        //Create a text element to draw a text in PDF page.
        PdfTextElement title = new PdfTextElement("Ticket", font, PdfBrushes.Black);
        PdfLayoutResult result = title.Draw(page, new PointF(0, 0));
        PdfStandardFont contentFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
        //Create text element.
        PdfTextElement content = new PdfTextElement(ticketDetails, contentFont, PdfBrushes.Black);
        PdfLayoutFormat format = new PdfLayoutFormat();
        format.Layout = PdfLayoutType.Paginate;
        //Draw a text to the PDF document.
        result = content.Draw(page, new RectangleF(0, result.Bounds.Bottom + paragraphAfterSpacing, page.GetClientSize().Width, page.GetClientSize().Height), format);

        //Create memory stream.
        MemoryStream memoryStream = new MemoryStream();
        //Save the PDF document.
        pdfDocument.Save(memoryStream);
        //Download the PDF document
        if (mail && Mailadres.mailadres != null)
        {
            MailService.EmailTicketByte(new MailDataWithAttachmentByte(
                new List<string> { Mailadres.mailadres },
                "Ticket for " + Ticket.MovieTitle + " | Time: " + Ticket.ShowStartDateTime,
                memoryStream.ToArray(),
                "Dear costumer, <br/><br/> Enjoy the Movie!<br/><br/> Greetings, Bioscoop"
                ));
            showMessageOnPage("E-mail sent, please check your inbox.");
        }
        else if (mail == false)
        {
            JS.SaveAs("Ticket.pdf", memoryStream.ToArray());
        }

    }
}
